syntax = "proto3";

package auth;

message Empty {}

message GetUserRequest {
  string userId = 1;
}

message GetUserResponse {
  string id = 1;
  string clientId = 2; 
  string userName = 3;
  string email = 4;
  string registerDate = 5; 
  bool isActive = 6;
  bool isBlocked = 7;
  string blockedDate = 8; 
  Role role = 9;
  string deactivatedDate = 10;
}

message PaginationMeta {
  int32 total = 1;
  int32 page = 2;
  int32 limit = 3;
  int32 totalPages = 4;
  bool hasNextPage = 5;
  bool hasPrevPage = 6;
}

message GetUsersResponse {
  repeated GetUserResponse data = 1; 
  PaginationMeta meta = 2;
}

message GetUsersRequest {
  string userId = 1;       
  string role = 2;          
  int32 page = 3;           
  int32 limit = 4;          
  bool isActive = 5;       
}

message UpdateUserRequest {
  string id = 1;         
  string email = 2;       
  string userName = 3;    
  string password = 4;    
  string clientId = 5;    
  string role = 6;       
}

message DeactiveUserRequest{
  string userId = 1;
}


message ValidateUser {
  string token = 1;
}


message HealthResponse{
  string status =1;
}



service UserService {
  rpc getUser (GetUserRequest) returns (GetUserResponse);
  rpc getUsers (GetUsersRequest) returns (GetUsersResponse);
  rpc updateUser (UpdateUserRequest) returns (GetUserResponse);
  rpc deactiveUser (DeactiveUserRequest) returns (GetUserResponse);
  rpc validateUser (ValidateUser) returns (GetUserResponse);
}

message logOutResponse{
  string message = 1;
  bool   success =2;
}

message LoginUserResponse {
  string id = 1;
  string email = 2;
  string userName = 3;
  string role = 4;
  string token = 5;
}
message LoginUserRequest {
  string email = 1;
  string password = 2;
}

message RegisterUserRequest {
  string email = 1;
  string userName = 2;
  string password = 3;
  string clientId = 4; 
  string role = 5;
}

message RegisterUserResponse {
  string id = 1;
  string email = 2;
  string userName = 3;
  string role = 4;
}

service AuthService {
  rpc loginUser (LoginUserRequest) returns (LoginUserResponse);
  rpc logOut (ValidateUser) returns (logOutResponse);
  rpc registerUser (RegisterUserRequest) returns (RegisterUserResponse);
}

service HealthService{
  rpc HealthCheck(Empty) returns (HealthResponse);
}

message CreateRoleRequest {
  string name = 1;         
  string description = 2;          
  repeated PermissionInput permissions = 3;  
}
message Permission {
  string id = 1;
  string action = 2;
  string entity = 3;
  string description = 4;
}

message Role {
  string id = 1;
  string name = 2;
  string description = 3;
  repeated Permission permissions = 4;
}

message CreateRoleResponse {
  Role role = 1;
}

message PermissionInput {
  string id = 1;          
  string action = 2;      
  string entity = 3;       
  string description = 4; 
}

message CreateRolePermissionRequest {
  string roleId = 1;
  string permissionId = 2;
}

message RolePermissionResponse {
  string id = 1;
  Role role = 2;
  Permission permission = 3;
}

message VerifyPermissionRequest{
  string role = 1;
  string permission = 2;
}

message VerifyPermissionResponse{
  bool allowed = 1;
}

service RoleService {
  rpc createRole (CreateRoleRequest) returns (CreateRoleResponse);
  rpc createPermission(PermissionInput) returns (PermissionInput);
  rpc linkRolePermission(CreateRolePermissionRequest) returns (RolePermissionResponse);
  rpc verifyPermission (VerifyPermissionRequest) returns (VerifyPermissionResponse);
}

message CheckRateLimitRequest {
  string userId = 1;
  string endpoint = 2;
  string ip = 3;
  string method = 4;
}

message CheckRateLimitResponse {
  bool allowed = 1;
}

service RateLimitService {
  rpc checkRateLimit (CheckRateLimitRequest) returns (CheckRateLimitResponse);
}